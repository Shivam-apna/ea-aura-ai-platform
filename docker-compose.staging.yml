version: '3.9'

services:
  nginx:
    image: nginx:latest
    container_name: nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - backend
      - nifi
    networks:
      - ea-aura-staging
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email support@aapnainfotech.com --agree-tos --no-eff-email -d staging.ea-aura.ai

  vault:
    image: vault:1.13.3
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "staging-vault-token"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - ea-aura-staging

  postgres:
    image: postgres:15
    container_name: postgres-staging
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: staging-postgres-password
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
    networks:
      - ea-aura-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak-staging
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=staging-keycloak-password
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=staging-postgres-password
      - KC_HOSTNAME=staging.ea-aura.ai
      - KC_HOSTNAME_STRICT=true
      - KC_HOSTNAME_STRICT_HTTPS=true
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
      - KC_FRONTEND_URL=https://staging.ea-aura.ai/auth
      - KC_PROXY_HEADERS=xforwarded
    command: start-dev
    ports:
      - "8080:8080"
    networks:
      - ea-aura-staging
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    container_name: elasticsearch-staging
    environment:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: "false"
    ports:
      - "9200:9200"
    volumes:
      - esdata_staging:/usr/share/elasticsearch/data
    networks:
      - ea-aura-staging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.2
    container_name: kibana-staging
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_BASEPATH: "/kibana"
      SERVER_REWRITEBASEPATH: "true"
      SERVER_PUBLICBASEURL: "https://staging.ea-aura.ai/kibana"
      SERVER_HOST: "0.0.0.0"
      XPACK_SECURITY_ENABLED: "false"
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: "staging-kibana-encryption-key-32chars"
    volumes:
      - kibana_data_staging:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - ea-aura-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/kibana/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  filebeat:
    image: docker.elastic.co/beats/filebeat:9.0.0
    container_name: filebeat-staging
    user: root
    command: filebeat -e --strict.perms=false
    volumes:
      - ./filebeat/filebeat.staging.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./backend/app/logs:/backend/app/logs
    networks:
      - ea-aura-staging
    depends_on:
      elasticsearch:
        condition: service_healthy
      backend:
        condition: service_started

  backend:
    build: ./backend
    container_name: backend-staging
    volumes:
      - ./backend:/app
    working_dir: /app
    expose:
      - "8081"
    environment:
      - ENVIRONMENT=staging
      - VAULT_TOKEN=staging-vault-token
      - VAULT_ADDR=http://vault:8200
      - KEYCLOAK_URL=https://staging.ea-aura.ai/auth
      - KEYCLOAK_REALM=ea_aura
    env_file:
      - ./backend/env.staging
    networks:
      - ea-aura-staging
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka-staging
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=ea-aura-staging-cluster-id-001
    volumes:
      - ./kafka/staging-data:/bitnami/kafka
    networks:
      - ea-aura-staging

  minio:
    image: minio/minio
    container_name: minio-staging
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: staging-minio-user
      MINIO_ROOT_PASSWORD: staging-minio-password
    volumes:
      - minio_data_staging:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - ea-aura-staging

  dbeaver:
    image: dbeaver/cloudbeaver:latest
    container_name: dbeaver-staging
    ports:
      - "8978:8978"
    environment:
      - CB_DATABASE=./data/cloudbeaver.db
      - CB_CUSTOM_CONFIG=./conf/cloudbeaver.conf
      - CB_SERVER_URL=https://staging.ea-aura.ai/dbeaver
      - CB_ROOT_URI=/dbeaver/
    volumes:
      - dbeaver_data_staging:/opt/cloudbeaver/workspace
      - dbeaver_logs_staging:/opt/cloudbeaver/logs
    networks:
      - ea-aura-staging
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.staging
    container_name: frontend-staging
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=https://staging.ea-aura.ai/api
      - VITE_KEYCLOAK_URL=https://staging.ea-aura.ai/auth
      - VITE_KEYCLOAK_REALM=ea_aura
      - VITE_KEYCLOAK_CLIENT_ID=ea_aura
    networks:
      - ea-aura-staging
    restart: unless-stopped

  nifi:
    image: apache/nifi:1.27.0
    container_name: nifi-staging
    environment:
      # Use different ports to avoid conflict with Keycloak (8080)
      - NIFI_WEB_HTTPS_HOST=0.0.0.0
      - NIFI_WEB_HTTPS_PORT=8443
      - NIFI_WEB_HTTP_HOST=0.0.0.0
      - NIFI_WEB_HTTP_PORT=8082  # Changed from 8080 to 8082
      - NIFI_WEB_PROXY_HOST=staging.ea-aura.ai
      - NIFI_WEB_PROXY_CONTEXT_PATH=/nifi
      
      # Disable clustering for single-node setup
      - NIFI_CLUSTER_IS_NODE=false
      - NIFI_ZK_CONNECT_STRING=
      - NIFI_ELECTION_MAX_WAIT=30 sec
      - NIFI_ELECTION_MAX_CANDIDATES=
      
      # Single-user authentication
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=admin123456789
      
      # JVM Settings
      - NIFI_JVM_HEAP_INIT=512m
      - NIFI_JVM_HEAP_MAX=1g
      
      # Remove SSL requirements
      - NIFI_SECURITY_KEYSTORE=
      - NIFI_SECURITY_KEYSTORE_TYPE=
      - NIFI_SECURITY_KEYSTORE_PASS=
      - NIFI_SECURITY_KEY_PASS=
      - NIFI_SECURITY_TRUSTSTORE=
      - NIFI_SECURITY_TRUSTSTORE_TYPE=
      - NIFI_SECURITY_TRUSTSTORE_PASS=
    ports:
      - "8082:8082"  # Changed from 8080 to 8082
      - "8443:8443"  # Keep HTTPS port
    volumes:
      - ./nifi/data:/opt/nifi/nifi-current/data
      - ./nifi/logs:/opt/nifi/nifi-current/logs
    networks:
      - ea-aura-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/nifi/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s


volumes:
  esdata_staging:
  filebeat-data_staging:
  minio_data_staging:
  postgres_data_staging:
  dbeaver_data_staging:
  dbeaver_logs_staging:
  kibana_data_staging:

networks:
  ea-aura-staging:
    driver: bridge
