version: '3.9'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ea-aura-nginx-staging
    ports:
      - "8081:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
      keycloak:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      vault:
        condition: service_started
      dbeaver:
        condition: service_started
    networks:
      - ea-aura-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ea-aura-postgres-staging
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
    networks:
      - ea-aura-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: ea-aura-keycloak-staging
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: staging.ea-aura.ai
      KC_HOSTNAME_ADMIN: staging.ea-aura.ai
      KC_HOSTNAME_STRICT: "true"
      KC_HOSTNAME_STRICT_HTTPS: "true"
      KC_HTTP_ENABLED: "false"
      KC_HTTPS_PROTOCOLS: TLSv1.2,TLSv1.3
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/server.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/server.key
    volumes:
      - ./nginx/ssl:/opt/keycloak/conf:ro
    depends_on:
      - postgres
    networks:
      - ea-aura-network
    restart: unless-stopped
    expose:
      - "8080"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ea-aura-backend-staging
    env_file:
      - ./backend/env.staging
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    networks:
      - ea-aura-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    expose:
      - "8081"

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    container_name: ea-aura-elasticsearch-staging
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "cluster.name=ea-aura-staging"
      - "node.name=ea-aura-node-1"
      - "bootstrap.memory_lock=true"
      - "network.host=0.0.0.0"
      - "http.port=9200"
      - "cluster.routing.allocation.disk.threshold_enabled=false"
    volumes:
      - esdata_staging:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - ea-aura-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    expose:
      - "9200"

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.2
    container_name: ea-aura-kibana-staging
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    networks:
      - ea-aura-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    expose:
      - "5601"

  # Vault
  vault:
    image: vault:1.13.3
    container_name: ea-aura-vault-staging
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=demo
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - ea-aura-network
    restart: unless-stopped
    expose:
      - "8200"

  # DBeaver (CloudBeaver)
  dbeaver:
    image: dbeaver/cloudbeaver:latest
    container_name: ea-aura-dbeaver-staging
    environment:
      - CB_DATABASE_URL=jdbc:postgresql://postgres:5432/keycloak
      - CB_DATABASE_USER=keycloak
      - CB_DATABASE_PASSWORD=keycloak_password
    volumes:
      - dbeaver_data_staging:/opt/cloudbeaver/workspace
      - dbeaver_logs_staging:/opt/cloudbeaver/logs
    networks:
      - ea-aura-network
    restart: unless-stopped
    expose:
      - "8978"

  # Kafka
  kafka:
    image: bitnami/kafka:latest
    container_name: ea-aura-kafka-staging
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_KRAFT_CLUSTER_ID=ea-aura-staging-cluster-id-001
    volumes:
      - ./kafka/data:/bitnami/kafka
    networks:
      - ea-aura-network
    restart: unless-stopped
    expose:
      - "9092"
      - "9093"

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: ea-aura-minio-staging
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data_staging:/data
    networks:
      - ea-aura-network
    restart: unless-stopped
    expose:
      - "9000"
      - "9001"

networks:
  ea-aura-network:
    driver: bridge

volumes:
  esdata_staging:
  postgres_data_staging:
  dbeaver_data_staging:
  dbeaver_logs_staging:
  minio_data_staging: 
